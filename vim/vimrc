" General Settings {{{
set nocompatible
set rnu
set nu
set showcmd
set modelines=1
set wildmenu
set lazyredraw
set splitright
set linebreak
set ttyfast
set backspace=2
set vb t_vb=
let &colorcolumn="80"
"disable docstring window for jedi
autocmd FileType python setlocal completeopt-=preview
let mapleader=" "
let maplocalleader=" "
" }}}

" GUI Settings {{{
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
" }}}

" General Mappings {{{
" use shift+tab to jump out of current deliminaters
"inoremap <s-tab> <ESC>%%a

" substitute entered pattern globally
nnoremap <leader>sa :%s//gc<Left><Left><Left>
" substitute pattern under cursor globally
nnoremap <leader>ss :%s/<C-r><C-w>//gc<Left><Left><Left>
vnoremap <leader>ss :%s/<C-r><C-w>//gc<Left><Left><Left>

" substitute locally
nnoremap <leader>sd :s//g<Left><Left>
vnoremap <leader>sd :s//g<Left><Left>

nnoremap <leader>c :set cursorline! cursorcolumn!<CR>

" Kill all trailing whitespaces
nnoremap <leader>wh :%s/\s\+$//e

" }}}

" Plugins {{{
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Github Plugins {{{
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'Raimondi/delimitMate'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'flazz/vim-colorschemes'
Plugin 'davidhalter/jedi-vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'sjl/gundo.vim'
Plugin 'Chiel92/vim-autoformat'
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/FuzzyFinder'
Plugin 'eparreno/vim-l9'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'Yggdroot/indentLine'
"Plugin 'ervandew/supertab'
Plugin 'valloric/YouCompleteMe'
Plugin 'morhetz/gruvbox'
Plugin 'nvie/vim-flake8'
Plugin 'reedes/vim-lexical'
Plugin 'severin-lemaignan/vim-minimap'
Plugin 'chrisbra/csv.vim'
Plugin 'majutsushi/tagbar'
Plugin 'brennier/quicktex'
"Plugin 'godlygeek/csapprox'
Plugin 'quabug/vim-gdscript'
Plugin 'rhysd/vim-clang-format'
" }}}

call vundle#end()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" }}}

" Plugin Settings {{{
" airline {{{
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
"if !exists('g:airline_symbols')
	"let g:airline_symbols = {}
"endif

"" unicode symbols
"let g:airline_left_sep = '¬ª'
"let g:airline_left_sep = '‚ñ∂'
"let g:airline_right_sep = '¬´'
"let g:airline_right_sep = '‚óÄ'
"let g:airline_symbols.crypt = 'üîí'
"let g:airline_symbols.linenr = '‚ò∞'
"let g:airline_symbols.maxlinenr = '„èë'
"let g:airline_symbols.branch = '‚éá'
"let g:airline_symbols.paste = '√û'
"let g:airline_symbols.spell = 'Íû®'
"let g:airline_symbols.notexists = '…Ü'
"let g:airline_symbols.whitespace = 'Œû'
" }}}

" NerdTree {{{
noremap <C-f> :NERDTreeToggle<CR>
let g:NERDTreeWinPos="right"
"}}}

" Tabular {{{
map <leader>tb :Tabularize/
" }}}

" {{{ Latex-Box
let g:LatexBox_latexmk_async=0
let g:LatexBox_output_type="pdf"
let g:LatexBox_quickfix=2
let g:LatexBox_show_warnings=0
"let g:LatexBox_latexmk_options="-pdf -pdflatex='pdflatex --shell-escape -synctex=1 \%O \%S'"
let g:LatexBox_latexmk_options="-pdf -xelatex"
let g:LatexBox_viewer="zathura"
let g:LatexBox_fold_toc=0
let g:tex_flavor='latex'
map <leader>lt :LatexTOCToggle<CR>
map <leader>lm :w<CR>:Latexmk<CR>
map <leader>lv :LatexView<CR>
let g:LatexBox_custom_inden=0
" }}}

" Gundo {{{
map <leader>gt :GundoToggle<CR>
" }}}

" Autoformat {{{
nnoremap <F3> :Autoformat<CR>
" }}}

" FuzzyFinder {{{
nnoremap <F5> :FufFile<Cr>
" }}}

" YouCompleteMe {{{
let g:ycm_key_list_previous_completion=['<Up>']
let g:ycm_global_ycm_extra_conf="~/.vim/.ycm_global_ycm_extra_conf.py"
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<s-tab>"
" }}}

" vim-lexical {{{
" }}}

" Tagbar {{{ "
nmap <F8> :TagbarToggle<CR>
" }}} Tagbar "

" Quicktex {{{ "
let g:quicktex_tex = {
    \' '   : "\<ESC>/<+.*+>\<CR>\"_c/+>/e\<CR>",
    \'displ'   : '\( <+++> \) <++>',
    \'mline'   : '\[ <+++> \] <++>',
    \'inl'   : '$ <+++> $ <++>',
    \'SI'   : '\SI{<+++>}{<++>} <++>',
    \'prf' : "\\begin{proof}\<CR><+++>\<CR>\\end{proof}",
    \'eq' : "\\begin{equation}\<CR><+++>\<CR>\\end{equation}<++>",
    \'al' : "\\begin{align}\<CR><+++>\<CR>\\end{align}<++>",
\}

let g:quicktex_math = {
    \' '    : "\<ESC>/<+.*+>\<CR>\"_c/+>/e\<CR>",
    \'eq'   : '= ',
    \'SI'   : '\SI{<+++>}{<++>} <++>',
    \'set'  : '\{ <+++> \} <++>',
    \'frac' : '\frac{<+++>}{<++>} <++>',
    \'sqrt' : '\sqrt{<+++>}{<++>} <++>',
    \'sub'  : '_{<+++>} <++>',
    \'pow'  : '^{<+++>} <++>',
    \'nabla': '\nabla',
    \'del'  : '\partial',
    \'in'   : '\in ',
\}
" }}} Quicktex "

" }}}

" Filetype Specifics {{{
filetype off
filetype plugin indent on
filetype indent on

" C++/SDL {{{
augroup cpp
    autocmd!
    " Compile current file to prototype called Output and execute it
    " TODO add function to link exernal librarys
    autocmd FileType cpp nnoremap <leader>c :!g++ % -o Output<CR>
    autocmd FileType cpp nnoremap <leader>r :!./Output<CR>
augroup END
" }}}

" Python {{{
augroup python_files
    autocmd!
    " Execute current script with pyton3
    autocmd FileType python nnoremap <F10> :exec '!python3' shellescape(@%, 1)<CR>
augroup END
" }}}

" Haskell {{{
augroup haskell_files
    autocmd!
    au BufEnter *.hs compiler ghc
augroup END

let g:haddock_browser="/usr/bin/firefox"
" }}}

" LaTeX {{{
let g:tex_conceal=""
" }}}

" Prose(tex, txt, markdown {{{
augroup lexical
    autocmd!
    autocmd Filetype markdown, mkd call lexical#init()
    autocmd Filetype tex call lexical#init()
    autocmd FileType text call lexical#init()
augroup END
" }}}
" }}}

" Search and Fold {{{
set showmatch " show matching parantheses
set incsearch "search while typing
set hlsearch "highlight seach
set ignorecase
set smartcase
nnoremap <leader> <Esc> :nohlsearch<cr>
nnoremap gV '[v']
set foldenable
set foldmethod=marker
" }}}

" Tabs {{{
set list
set listchars=tab:>-
" }}}

" Colors {{{
syntax enable
"set t_Co=256
autocmd GUIEnter * set vb t_vb=
autocmd VimEnter * set vb t_vb=
set background=dark
let g:gruvbox_italic=1
let g:gruvbox_bold=1
let g:gruvbox_underline=1
let g:gruvbox_undercurl=1
let g:gruvbox_contrast_dark="medium"
let g:gruvbox_improved_warnings=1
let g:gruvbox_invert_indent_guides=1
colorscheme gruvbox
" }}}

" Functions {{{
function! FindAndReplaceAll(from, to)
    echo a:from
    execute "%s/" . a:from . "/" . a:to . "/gc"
endfunction

function! FindAndReplaceLocal(from, to)
    echo a:from
    execute "s/" . a:from . "/" . a:to . "/g"
endfunction

function! EnableCursorLine()
    execute "hi clear CursorLine"
    execute "hi CursorLine cterm=underline gui=underline"
endfunction
" }}}

" Commands {{{
" open the vimrc file in new buffer
command! -nargs=0 -complete=command Vimrc tabe $MYVIMRC
" change spelling language to german
command! -nargs=0 -complete=command SpellGer setlocal spelllang=de
" change spelling language to english
command! -nargs=0 -complete=command SpellEng setlocal spelllang=en
" Change Cursorline to actual line
command! -nargs=0 -complete=command Line :call EnableCursorLine()<CR>
" }}}

" Statusline {{{
"set showmode
"set laststatus=2
" }}}

" vim:foldmethod=marker:foldlevel=0
