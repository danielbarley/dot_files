" General Settings {{{
set nocompatible
set rnu
set nu
set showcmd
set modelines=1
set wildmenu
set lazyredraw
set splitright
set linebreak
set ttyfast
set backspace=2
set vb t_vb=
set directory=$HOME/.vim/swapfiles//
let &colorcolumn="80"
"disable docstring window for jedi
autocmd FileType python setlocal completeopt-=preview
let mapleader=" "
let maplocalleader=" "
" }}}

" GUI Settings {{{
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar
" }}}

" General Mappings {{{
" use shift+tab to jump out of current deliminaters
"inoremap <s-tab> <ESC>%%a

" substitute entered pattern globally
nnoremap <leader>sa :%s//gc<Left><Left><Left>
" substitute pattern under cursor globally
nnoremap <leader>ss :%s/<C-r><C-w>//gc<Left><Left><Left>
vnoremap <leader>ss :%s/<C-r><C-w>//gc<Left><Left><Left>

" substitute locally
nnoremap <leader>sd :s//g<Left><Left>
vnoremap <leader>sd :s//g<Left><Left>

nnoremap <leader>c :set cursorline! cursorcolumn!<CR>

" Kill all trailing whitespaces
nnoremap <leader>wh :%s/\s\+$//e

" }}}

" Plugins {{{
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Github Plugins {{{
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-eunuch'
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'Raimondi/delimitMate'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'davidhalter/jedi-vim'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'sjl/gundo.vim'
Plugin 'Chiel92/vim-autoformat'
Plugin 'mileszs/ack.vim'
Plugin 'vim-scripts/FuzzyFinder'
Plugin 'eparreno/vim-l9'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'Yggdroot/indentLine'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'morhetz/gruvbox'
Plugin 'nvie/vim-flake8'
Plugin 'reedes/vim-lexical'
Plugin 'chrisbra/csv.vim'
Plugin 'majutsushi/tagbar'
Plugin 'brennier/quicktex'
Plugin 'rhysd/vim-clang-format'
Plugin 'airblade/vim-gitgutter'
Plugin 'vhda/verilog_systemverilog.vim'
Plugin 'adelarsq/vim-matchit'
Plugin 'jreybert/vimagit'
Plugin 'sheerun/vim-polyglot'
Plugin 'chrisbra/Recover.vim'
Plugin 'vimwiki/vimwiki'
Plugin 'vim-scripts/TagHighlight'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'vim-scripts/Tabmerge'
Plugin 'sotte/presenting.vim'
Plugin 'sirtaj/vim-openscad'
Plugin 'stevearc/vim-arduino'
Plugin 'diepm/vim-rest-console'
Plugin 'rhysd/vim-grammarous'
Plugin 'Rigellute/shades-of-purple.vim'
Plugin 'rdnetto/YCM-Generator'
" }}}

call vundle#end()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" }}}

" Plugin Settings {{{
" Airline {{{
let g:airline_detect_iminsert=1
let g:shadesof_purple_airline=1
let g:airline_theme='shades_of_purple'

if (match(system('hostname'), 'imladris') >= 0)
	let g:airline_powerline_fonts = 0

	"if !exists('g:airline_symbols')
		"let g:airline_symbols = {}
	"endif

	"let g:airline_left_sep = '░'
	"let g:airline_right_sep = '░'
	"let g:airline_symbols.crypt = '〇'
	"let g:airline_symbols.linenr = '↕'
	"let g:airline_symbols.maxlinenr = '½'
	"let g:airline_symbols.branch = 'ϟ'
	"let g:airline_symbols.paste = 'Þ'
	"let g:airline_symbols.spell = 'Ꞩ'
	"let g:airline_symbols.notexists = 'Ɇ'
	"let g:airline_symbols.whitespace = 'Ξ'
"else
	"let g:airline_powerline_fonts = 1

	"let airline#extensions#syntastic#warning_symbol = '☼'
	"let airline#extensions#syntastic#error_symbol = '✗'
	"let g:airline#extensions#ycm#error_symbol = '☼'
	"let g:airline#extensions#ycm#warning_symbol = '✗'
endif

let g:airline#extensions#cursormode#enabled = 0


let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>+ <Plug>AirlineSelectNextTab

" fixes unnecessary redraw, when e.g. opening Gundo window
let airline#extensions#tabline#ignore_bufadd_pat =
	\ '\c\vgundo|undotree|vimfiler|tagbar|nerd_tree'
" }}}

" Syntastic {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = "\u2717"
let g:syntastic_warning_symbol = "\u26A0"
" }}}

" NerdTree {{{
noremap <C-t> :NERDTreeToggle<CR>
let g:NERDTreeWinPos="right"
"}}}

" Tabular {{{
map <leader>tb :Tabularize/
" }}}

" {{{ Latex-Box
let g:LatexBox_latexmk_async=0
let g:LatexBox_output_type="pdf"
let g:LatexBox_quickfix=2
let g:LatexBox_show_warnings=0
let g:LatexBox_latexmk_async=1
let g:LatexBox_latexmk_options="-pdf -pdflatex='pdflatex -shell-escape -synctex=1 \%O \%S'"
"let g:LatexBox_latexmk_options="-pdf -xelatex"
let g:LatexBox_viewer="zathura"
let g:LatexBox_fold_toc=0
let g:tex_flavor='latex'
let g:tex_bibtexflavor='biber'
map <leader>lt :LatexTOCToggle<CR>
map <leader>lm :w<CR>:Latexmk<CR>
map <leader>lv :LatexView<CR>
let g:LatexBox_custom_indent=0
" }}}

" Gundo {{{
nnoremap <F10> :GundoToggle<CR>
" }}}

" Autoformat {{{
nnoremap <F12> :Autoformat<CR>
" }}}

" Fugitive {{{ "
nnoremap <F5> :Gstatus<CR>
nnoremap <F6> :Gcommit
nnoremap <F7> :Gpull
nnoremap <F8> :Gpush
" }}} Fugitive "

" FuzzyFinder {{{
nnoremap <F1> :FufFile<Cr>
nnoremap <F2> :FufBuffer<Cr>
nnoremap <F3> :FufTag<Cr>
nnoremap <F4> :FufBufferTag<Cr>

nnoremap <silent> <C-]> :FufBufferTagAllWithCursorWord!<CR>
vnoremap <silent> <C-]> :FufBufferTagAllWithSelectedText!<CR>
" }}}

" YouCompleteMe {{{
let g:ycm_key_list_previous_completion=['<Up>']
let g:ycm_global_ycm_extra_conf="~/.vim/.ycm_global_ycm_extra_conf.py"
let g:ycm_semantic_triggers =  { 'c' : ['->', '.', 're!SDL', 're!gl'] }
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<s-tab>"
" }}}

" vim-lexical {{{
" }}}

" Tagbar {{{ "
nnoremap <F9> :TagbarOpen fj<CR>
let g:tagbar_autoclose=0
" }}} Tagbar "

" Quicktex {{{ "
let g:quicktex_tex = {
    \' '   : "\<ESC>/<+.*+>\<CR>\"_c/+>/e\<CR>",
    \'displ'   : '\( <+++> \) <++>',
    \'mline'   : '\[ <+++> \] <++>',
    \'inl'   : '$ <+++> $ <++>',
    \'SI'   : '\SI{<+++>}{<++>} <++>',
    \'prf' : "\\begin{proof}\<CR><+++>\<CR>\\end{proof}",
    \'eq' : "\\begin{equation}\<CR><+++>\<CR>\\end{equation}<++>",
    \'al' : "\\begin{align}\<CR><+++>\<CR>\\end{align}<++>",
\}

let g:quicktex_math = {
    \' '    : "\<ESC>/<+.*+>\<CR>\"_c/+>/e\<CR>",
    \'eq'   : '= ',
    \'SI'   : '\SI{<+++>}{<++>} <++>',
    \'set'  : '\{ <+++> \} <++>',
    \'frac' : '\frac{<+++>}{<++>} <++>',
    \'sqrt' : '\sqrt{<+++>} <++>',
    \'sub'  : '\<Del>_{<+++>} <++>',
    \'pow'  : '\<Del>^{<+++>} <++>',
    \'nabla': '\nabla',
    \'del'  : '\partial',
    \'in'   : '\in ',
\}
" }}} Quicktex "

" vimpyter {{{ "
autocmd Filetype ipynb nmap <silent><Leader>b :VimpyterInsertPythonBlock<CR>
autocmd Filetype ipynb nmap <silent><Leader>j :VimpyterStartJupyter<CR>
autocmd Filetype ipynb nmap <silent><Leader>n :VimpyterStartNteract<CR>
" }}} vimpyter "

" TermDebug {{{ "
packadd termdebug
let g:termdebug_wide=1
" }}} TermDebug "

" clang-format {{{ "
let g:clang_format#style_options = {
			\ "BasedOnStyle": "LLVM",
			\ "IndentWidth": 8,
			\ "UseTab": "Always",
			\ "AllowShortIfStatementsOnASingleLine": "false",
			\ "IndentCaseLabels": "false"}
" }}} clang-format "
" }}}

" Filetype Specifics {{{
filetype off
filetype plugin indent on
filetype indent on

" C++/SDL {{{
augroup cpp
    autocmd!
    " Compile current file to prototype called Output and execute it
    " TODO add function to link exernal librarys
    autocmd FileType cpp nnoremap <leader>c :!g++ % -o Output<CR>
    autocmd FileType cpp nnoremap <leader>r :!./Output<CR>
augroup END
" }}}

" Python {{{
augroup python_files
    autocmd!
    " Execute current script with pyton3
    autocmd FileType python nnoremap <F10> :exec '!python3' shellescape(@%, 1)<CR>
augroup END
" }}}

" Haskell {{{
augroup haskell_files
    autocmd!
    au BufEnter *.hs compiler ghc
augroup END

let g:haddock_browser="/usr/bin/firefox"
" }}}

" LaTeX {{{
let g:tex_conceal=""
" }}}

" Prose(tex, txt, markdown {{{
augroup lexical
    autocmd!
    "autocmd Filetype markdown, mkd call lexical#init()
    autocmd Filetype tex call lexical#init()
    autocmd FileType text call lexical#init()
augroup END
" }}}
" }}}

" Search and Fold {{{
set showmatch " show matching parantheses
set incsearch "search while typing
set hlsearch "highlight seach
set ignorecase
set smartcase
nnoremap <leader> <Esc> :nohlsearch<cr>
nnoremap gV '[v']
set foldenable
set foldmethod=marker
" }}}

" Tabs {{{
set list
set listchars=tab:>-
" }}}

" Colors {{{
syntax enable
set t_Co=256
autocmd GUIEnter * set vb t_vb=
autocmd VimEnter * set vb t_vb=
set background=dark
"let g:gruvbox_italic=1
"let g:gruvbox_bold=1
"let g:gruvbox_underline=1
"let g:gruvbox_undercurl=1
"let g:gruvbox_contrast_dark="hard"
"let g:gruvbox_contrast_light="medium"
"let g:gruvbox_improved_warnings=1
"let g:gruvbox_invert_indent_guides=1

"let g:PaperColor_Theme_Options = {
  "\   'language': {
  "\     'python': {
  "\       'highlight_builtins' : 1
  "\     },
  "\     'cpp': {
  "\       'highlight_standard_library': 1
  "\     },
  "\     'c': {
  "\       'highlight_builtins' : 1
  "\     }
  "\   }
  "\ }
"colorscheme gruvbox
"colorscheme elflord
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"  
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
colorscheme black_cherries
" }}}

" Functions {{{
function! FindAndReplaceAll(from, to)
    echo a:from
    execute "%s/" . a:from . "/" . a:to . "/gc"
endfunction

function! FindAndReplaceLocal(from, to)
    echo a:from
    execute "s/" . a:from . "/" . a:to . "/g"
endfunction

function! EnableCursorLine()
    execute "hi clear CursorLine"
    execute "hi CursorLine cterm=underline gui=underline"
endfunction
" }}}

" Commands {{{
" open the vimrc file in new buffer
command! -nargs=0 -complete=command Vimrc tabe $MYVIMRC
" change spelling language to german
command! -nargs=0 -complete=command SpellGer setlocal spelllang=de
" change spelling language to english
command! -nargs=0 -complete=command SpellEng setlocal spelllang=en
" Change Cursorline to actual line
command! -nargs=0 -complete=command Line :call EnableCursorLine()<CR>
" }}}

" Statusline {{{
" disable insert mode notification since airline shows the current mode
set noshowmode
"set laststatus=2
" }}}

" vim:foldmethod=marker:foldlevel=0
